// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SiteForAdaptation.Data;

namespace SiteForAdaptation.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220515191236_df4")]
    partial class df4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sorting")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.ContactItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("ContactItems");
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.MemoForManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Subtittle_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtittle_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtittle_3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtittle_4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtittle_5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle_3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle_4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle_5")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("MemoForManagers");
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.Opening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("VideoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId")
                        .IsUnique();

                    b.ToTable("Openings");
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.StoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StoryMapId")
                        .HasColumnType("int");

                    b.Property<string>("Tittle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StoryMapId");

                    b.ToTable("StoryItems");
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.StoryMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("VideoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("StoryMaps");
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.UserStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserStatistics");
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.UserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("UserTasks");
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.UserTaskFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTaskParagraphId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserTaskParagraphId");

                    b.ToTable("UserTaskFiles");
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.UserTaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserTaskId");

                    b.ToTable("UserTaskItems");
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.UserTaskLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTaskParagraphId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserTaskParagraphId");

                    b.ToTable("UserTaskLinks");
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.UserTaskParagraph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Subtittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTaskItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserTaskItemId");

                    b.ToTable("UserTaskParagraphs");
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tittle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.Contact", b =>
                {
                    b.HasOne("SiteForAdaptation.Data.Entities.Company", "Company")
                        .WithOne("Contact")
                        .HasForeignKey("SiteForAdaptation.Data.Entities.Contact", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.ContactItem", b =>
                {
                    b.HasOne("SiteForAdaptation.Data.Entities.Contact", "Contact")
                        .WithMany("Items")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiteForAdaptation.Data.Entities.UserType", "UserType")
                        .WithMany("ContactItems")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.MemoForManager", b =>
                {
                    b.HasOne("SiteForAdaptation.Data.Entities.Company", "Company")
                        .WithOne("MemoForManager")
                        .HasForeignKey("SiteForAdaptation.Data.Entities.MemoForManager", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.Opening", b =>
                {
                    b.HasOne("SiteForAdaptation.Data.Entities.UserType", "UserType")
                        .WithOne("Opening")
                        .HasForeignKey("SiteForAdaptation.Data.Entities.Opening", "UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.StoryItem", b =>
                {
                    b.HasOne("SiteForAdaptation.Data.Entities.StoryMap", "StoryMap")
                        .WithMany("StoryItems")
                        .HasForeignKey("StoryMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.StoryMap", b =>
                {
                    b.HasOne("SiteForAdaptation.Data.Entities.UserType", "UserType")
                        .WithMany("StoryMaps")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.UserTask", b =>
                {
                    b.HasOne("SiteForAdaptation.Data.Entities.Company", "Company")
                        .WithMany("UserTasks")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiteForAdaptation.Data.Entities.UserType", "UserType")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.UserTaskFile", b =>
                {
                    b.HasOne("SiteForAdaptation.Data.Entities.UserTaskParagraph", "UserTaskParagraph")
                        .WithMany("UserTaskFiles")
                        .HasForeignKey("UserTaskParagraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.UserTaskItem", b =>
                {
                    b.HasOne("SiteForAdaptation.Data.Entities.UserTask", "UserTask")
                        .WithMany("Items")
                        .HasForeignKey("UserTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.UserTaskLink", b =>
                {
                    b.HasOne("SiteForAdaptation.Data.Entities.UserTaskParagraph", "UserTaskParagraph")
                        .WithMany("UserTaskLinks")
                        .HasForeignKey("UserTaskParagraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiteForAdaptation.Data.Entities.UserTaskParagraph", b =>
                {
                    b.HasOne("SiteForAdaptation.Data.Entities.UserTaskItem", "UserTaskItem")
                        .WithMany("Paragraphs")
                        .HasForeignKey("UserTaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
